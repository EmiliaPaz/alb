-- How many bits are needed to represent numbers in the range 0 to (n-1)?
-- The answer is given by log2 n, assuming the following definition:
--
-- log2 n = if n==1 then 0
--          else if even n then 1 + log2 (n `div` 2)
--          else 1 + log2 ((n+1) `div` 2)
--
-- Or, see how pretty this looks in Habit (although perhaps the class
-- should be called IxBits in that context):
--
--   class Log2 (n::nat) = (m::nat) 
--   instance Log2 0 = n fails
--   else     Log2 1 = 0
--   else     Log2 n = 1 + Log2 (n / 2)        -- (A)
--   else     Log2 n = 1 + Log2 ((n+1) / 2)    -- (B)
-- 
-- The clauses marked A and B here are particularly interesting; the /
-- symbol represents division of naturals which is a partial function.
-- (Or really, in Habit type class terms, a partial relation.) So if n
-- is an odd number, then n/2 is not defined, clause (A) fails, and we
-- continue to clause (B) instead.
--

+ a b c | a b ~> c, a c ~> b, c b ~> a.
/ a b c | a b ~> c, b c ~> a.

Log2 n m | n ~> m.

Log2 0 n fails;
Log2 1 0;
Log2 n m if + p 1 m, / n 2 q, Log2 q p;
Log2 n m if + p 1 m, Log2 q p, / n1 2 q, + n 1 n1.

-- Some tests:

Log2 0 n?   -- should fail

Log2 1 n?   -- expect n=0

Log2 2 n?   -- expect n=1

Log2 3 n?   -- expect n=2
Log2 4 n?   -- expect n=2

Log2 5 n?   -- expect n=3
Log2 6 n?   -- expect n=3
Log2 7 n?   -- expect n=3
Log2 8 n?   -- expect n=3

Log2 9 n?   -- expect n=4

Log2 126 n?   -- expect n=7
Log2 127 n?   -- expect n=7
Log2 128 n?   -- expect n=7

Log2 129 n?   -- expect n=8
Log2 255 n?   -- expect n=8
Log2 256 n?   -- expect n=8

Log2 257 n?   -- expect n=9

Log2 65535 n?  -- expect n=16
Log2 65536 n?  -- expect n=16
Log2 65537 n?  -- expect n=17

Log2 4294967296 n? -- expect n=32
Log2 4294967297 n? -- expect n=33
