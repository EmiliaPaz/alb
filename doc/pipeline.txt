(Last updated June 26, 2013)

The compiler pipeline is defined by the buildPipeline function in
Driver.hs.  It is divided into multiple "phases" each of which is made
up of multiple "passes".  In keeping with the 'nanopass' spirit many of these
passes are small and do very simple operations.  The pipeline is as follows.

The phases and passes are as follows.

----------------
toDesugar
----------------

fixityProgram (Analyzer/Fixity.hs)
  Resolves the fixities of infix forms (i.e. TyInfix, EInfix, and PInfix) and
  replaces them with the appropriate application forms.

freshenProgram (Analyzer/Freshening.hs)
  Freshens variable bindings by uniquely renaming each one.  

eliminateTuplesProgram (Analyzer/Tuples.hs)
  In conjunction with patternTuplesProgram and generateTuples,
  replaces infix forms with equivalent data types and constructors.

desugarProgram (Analyzer/Desugaring.hs)
  This phase does does the bulk of desugaring and translates from
  'Surface' syntax to 'IMPEG' syntax.  It would be a good idea to
  split out the separate parts of this process just as fixity
  resolution and tuple elimination are currently split out.

patternTuplesProgram (Analyzer/Tuples.hs)
  (See eliminateTuplesProgram)
generateTuples (Analyzer/Tuples.hs)
  (See eliminateTuplesProgram)

rewriteFunctionalNotation (Analyzer/FunctionalNotation.hs)
  TODO
  (This pass might be simpler if it were rewritten to use SYB.)

----------------
toInferKinds
----------------

inferKinds (Typechecker/KindInference.hs)
  Infers kinds and adds kind annotations to everything

----------------
toInferTypes s
----------------

inferTypes (Typechecker/TypeInference.hs)
  Infers types and translates from IMPEG (which has implicit types) to
  XMPEG (which has explicit type annotations).

cleanupProgram (Typechecker/Cleanup.hs)
  Propagates the type annotations generated by inferTypes.

----------------
toSpecialized
----------------

concat' (Driver.hs)
  Calls concatPrograms (Syntax/XMPEG.hs) in order to merge several files into a single program

specializeProgram (Specializer.lhs)
  Eliminate calls to polymorphic functions by generating a new,
  specialized versions for each distinct combination of types that
  they are applied to.

----------------
toNormalized main
----------------

patternMatch (Normalizer/PatternMatchCompiler.lhs)

inlineProgram (Normalizer/Inliner.lhs)

etaInit (Normalizer/EtaInit.lhs)

----------------
toAnnotated
----------------

propagateLCTypes (Typechecker/LambdaCasePropagation.hs)
  The pattern match compiler outputs a version of LambdaCase where the
  type annotations on EVars are left undefined.  This pass infers
  those types and adds them to the EVars.

checkLCProgram (Typechecker/LambdaCase.hs)
  Checks that the produced LambdaCase program is actually well typed.

----------------
toThunkified
----------------

thunkifyLC (Fidget/Thunkify.hs)
  Convert EBind and monadic primitives into explicit force/delay, and
  coerce the I monad to the M monad.

etaInit (Normalizer/EtaInit.lhs)
  (See previous use of etaInit)

inlineProgram (Normalizer/Inliner.lhs)
  (See previous use of inlineProgram)

renameProgramCtors (Fidget/RenameTypes.hs)
  Gives specialized constructors unique names

renameProgramTypes (Fidget/RenameTypes.hs)
  Gives specialized types unique names

----------------
toFidgetted
----------------

transLCtoFidget (Fidget/LambdaCaseToFidget.hs)
  Converts LambdaCase to Fidget

specialTypes (Fidget/SpecialTypes.hs)
  This module replaces types that should be treated "special".  For
  example, 'Unit' and 'Maybe (Ix n)' are represented with 'Funit' and
  'Fint' respectively rather than using 'Ftcon'.

tailCallOpt (Fidget/TailCalls.hs)
  Turns tail calls into jumps to local labels

optFidget (Fidget/FidgetCleanup.hs)
  Optimizes Fidget code

renameVars (Fidget/RenameVars.hs)
  Adds a prefix to non-exported variables so they don't conflict with C code that we might link with

addExports (Fidget/AddExports.hs)
  Creates wrapper functions for exported functions that allow C code to call into Habit

mangleProgram (Fidget/Mangle.hs)
  Mangles variable names to be compatible with the CompCert back-end

fixIds (Fidget/RenameIds.hs)
  Attempts to reduce the unique integer suffix on identifiers to a
  small value in an attempt to make the generated Fidget code easier
  to read.
